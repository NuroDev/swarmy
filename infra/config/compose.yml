configs:
  traefik-cfg-global:
    file: ./traefik.yml
    name: traefik-cfg-global

services:
  api:
    image: ghcr.io/nurodev/fac/api:latest
    networks:
      - public
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.api.entrypoints=https"
        - "traefik.http.routers.api.rule=Host(`api.$DOMAIN`)"
        - "traefik.http.routers.api.tls=true"
        - "traefik.http.routers.api.tls.certresolver=cloudflare"
        - "traefik.http.services.api.loadbalancer.server.port=3000"
      replicas: 1
      restart_policy:
        condition: on-failure
      update_config:
        order: start-first
        parallelism: 1
        delay: 2s

  traefik:
    image: traefik:v3.0
    networks:
      - public
    ports:
      - 80:80
      - 443:443
    configs:
      - source: traefik-cfg-global
        target: /etc/traefik/traefik.yml
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      update_config:
        order: start-first
        parallelism: 1
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  web:
    image: ghcr.io/nurodev/fac/web:latest
    networks:
      - public
    environment:
      SITE: https://$DOMAIN
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.web.entrypoints=https"
        - "traefik.http.routers.web.rule=Host(`$DOMAIN`)"
        - "traefik.http.routers.web.tls=true"
        - "traefik.http.routers.web.tls.certresolver=cloudflare"
        - "traefik.http.services.web.loadbalancer.server.port=4321"
      replicas: 1
      restart_policy:
        condition: on-failure
      update_config:
        order: start-first
        parallelism: 1
        delay: 2s

networks:
  public:
    driver: overlay
